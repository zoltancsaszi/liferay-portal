/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portlet.asset.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.asset.kernel.model.AssetCategory;
import com.liferay.asset.kernel.model.AssetCategoryVersion;
import com.liferay.asset.kernel.model.AssetCategoryVersionModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.petra.string.StringBundler;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.model.version.VersionedModelInvocationHandler;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.Method;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AssetCategoryVersion service. Represents a row in the &quot;AssetCategoryVersion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AssetCategoryVersionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssetCategoryVersionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AssetCategoryVersionImpl
 * @generated
 */
@ProviderType
public class AssetCategoryVersionModelImpl extends BaseModelImpl<AssetCategoryVersion>
	implements AssetCategoryVersionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a asset category version model instance should use the <code>AssetCategoryVersion</code> interface instead.
	 */
	public static final String TABLE_NAME = "AssetCategoryVersion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "assetCategoryVersionId", Types.BIGINT },
			{ "version", Types.INTEGER },
			{ "uuid_", Types.VARCHAR },
			{ "externalReferenceCode", Types.VARCHAR },
			{ "categoryId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "parentCategoryId", Types.BIGINT },
			{ "leftCategoryId", Types.BIGINT },
			{ "rightCategoryId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "vocabularyId", Types.BIGINT },
			{ "lastPublishDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("assetCategoryVersionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("version", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("parentCategoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("leftCategoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("rightCategoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vocabularyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table AssetCategoryVersion (assetCategoryVersionId LONG not null primary key,version INTEGER,uuid_ VARCHAR(75) null,externalReferenceCode VARCHAR(75) null,categoryId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,parentCategoryId LONG,leftCategoryId LONG,rightCategoryId LONG,name VARCHAR(75) null,title STRING null,description STRING null,vocabularyId LONG,lastPublishDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table AssetCategoryVersion";
	public static final String ORDER_BY_JPQL = " ORDER BY assetCategoryVersion.version DESC";
	public static final String ORDER_BY_SQL = " ORDER BY AssetCategoryVersion.version DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.asset.kernel.model.AssetCategoryVersion"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.asset.kernel.model.AssetCategoryVersion"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.asset.kernel.model.AssetCategoryVersion"),
			true);
	public static final long CATEGORYID_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 4L;
	public static final long GROUPID_COLUMN_BITMASK = 8L;
	public static final long NAME_COLUMN_BITMASK = 16L;
	public static final long PARENTCATEGORYID_COLUMN_BITMASK = 32L;
	public static final long UUID_COLUMN_BITMASK = 64L;
	public static final long VERSION_COLUMN_BITMASK = 128L;
	public static final long VOCABULARYID_COLUMN_BITMASK = 256L;
	public static final String MAPPING_TABLE_ASSETENTRIES_ASSETCATEGORIES_NAME = "AssetEntries_AssetCategories";
	public static final Object[][] MAPPING_TABLE_ASSETENTRIES_ASSETCATEGORIES_COLUMNS =
		{
			{ "companyId", Types.BIGINT },
			{ "categoryId", Types.BIGINT },
			{ "entryId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_ASSETENTRIES_ASSETCATEGORIES_SQL_CREATE =
		"create table AssetEntries_AssetCategories (companyId LONG not null,categoryId LONG not null,entryId LONG not null,primary key (categoryId, entryId))";
	public static final boolean FINDER_CACHE_ENABLED_ASSETENTRIES_ASSETCATEGORIES =
		GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.AssetEntries_AssetCategories"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.asset.kernel.model.AssetCategoryVersion"));

	public AssetCategoryVersionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _assetCategoryVersionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAssetCategoryVersionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _assetCategoryVersionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AssetCategoryVersion.class;
	}

	@Override
	public String getModelClassName() {
		return AssetCategoryVersion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AssetCategoryVersion, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AssetCategoryVersion, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<AssetCategoryVersion, Object> attributeGetterFunction = entry.getValue();

			attributes.put(attributeName,
				attributeGetterFunction.apply((AssetCategoryVersion)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AssetCategoryVersion, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AssetCategoryVersion, Object> attributeSetterBiConsumer = attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((AssetCategoryVersion)this,
					entry.getValue());
			}
		}
	}

	public Map<String, Function<AssetCategoryVersion, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AssetCategoryVersion, Object>> getAttributeSetterBiConsumers() {
		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<AssetCategoryVersion, Object>> _attributeGetterFunctions;
	private static final Map<String, BiConsumer<AssetCategoryVersion, Object>> _attributeSetterBiConsumers;

	static {
		Map<String, Function<AssetCategoryVersion, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<AssetCategoryVersion, Object>>();
		Map<String, BiConsumer<AssetCategoryVersion, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AssetCategoryVersion, ?>>();


		attributeGetterFunctions.put("assetCategoryVersionId", AssetCategoryVersion::getAssetCategoryVersionId);
		attributeSetterBiConsumers.put("assetCategoryVersionId", (BiConsumer<AssetCategoryVersion, Long>)AssetCategoryVersion::setAssetCategoryVersionId);
		attributeGetterFunctions.put("version", AssetCategoryVersion::getVersion);
		attributeSetterBiConsumers.put("version", (BiConsumer<AssetCategoryVersion, Integer>)AssetCategoryVersion::setVersion);
		attributeGetterFunctions.put("uuid", AssetCategoryVersion::getUuid);
		attributeSetterBiConsumers.put("uuid", (BiConsumer<AssetCategoryVersion, String>)AssetCategoryVersion::setUuid);
		attributeGetterFunctions.put("externalReferenceCode", AssetCategoryVersion::getExternalReferenceCode);
		attributeSetterBiConsumers.put("externalReferenceCode", (BiConsumer<AssetCategoryVersion, String>)AssetCategoryVersion::setExternalReferenceCode);
		attributeGetterFunctions.put("categoryId", AssetCategoryVersion::getCategoryId);
		attributeSetterBiConsumers.put("categoryId", (BiConsumer<AssetCategoryVersion, Long>)AssetCategoryVersion::setCategoryId);
		attributeGetterFunctions.put("groupId", AssetCategoryVersion::getGroupId);
		attributeSetterBiConsumers.put("groupId", (BiConsumer<AssetCategoryVersion, Long>)AssetCategoryVersion::setGroupId);
		attributeGetterFunctions.put("companyId", AssetCategoryVersion::getCompanyId);
		attributeSetterBiConsumers.put("companyId", (BiConsumer<AssetCategoryVersion, Long>)AssetCategoryVersion::setCompanyId);
		attributeGetterFunctions.put("userId", AssetCategoryVersion::getUserId);
		attributeSetterBiConsumers.put("userId", (BiConsumer<AssetCategoryVersion, Long>)AssetCategoryVersion::setUserId);
		attributeGetterFunctions.put("userName", AssetCategoryVersion::getUserName);
		attributeSetterBiConsumers.put("userName", (BiConsumer<AssetCategoryVersion, String>)AssetCategoryVersion::setUserName);
		attributeGetterFunctions.put("createDate", AssetCategoryVersion::getCreateDate);
		attributeSetterBiConsumers.put("createDate", (BiConsumer<AssetCategoryVersion, Date>)AssetCategoryVersion::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", AssetCategoryVersion::getModifiedDate);
		attributeSetterBiConsumers.put("modifiedDate", (BiConsumer<AssetCategoryVersion, Date>)AssetCategoryVersion::setModifiedDate);
		attributeGetterFunctions.put("parentCategoryId", AssetCategoryVersion::getParentCategoryId);
		attributeSetterBiConsumers.put("parentCategoryId", (BiConsumer<AssetCategoryVersion, Long>)AssetCategoryVersion::setParentCategoryId);
		attributeGetterFunctions.put("leftCategoryId", AssetCategoryVersion::getLeftCategoryId);
		attributeSetterBiConsumers.put("leftCategoryId", (BiConsumer<AssetCategoryVersion, Long>)AssetCategoryVersion::setLeftCategoryId);
		attributeGetterFunctions.put("rightCategoryId", AssetCategoryVersion::getRightCategoryId);
		attributeSetterBiConsumers.put("rightCategoryId", (BiConsumer<AssetCategoryVersion, Long>)AssetCategoryVersion::setRightCategoryId);
		attributeGetterFunctions.put("name", AssetCategoryVersion::getName);
		attributeSetterBiConsumers.put("name", (BiConsumer<AssetCategoryVersion, String>)AssetCategoryVersion::setName);
		attributeGetterFunctions.put("title", AssetCategoryVersion::getTitle);
		attributeSetterBiConsumers.put("title", (BiConsumer<AssetCategoryVersion, String>)AssetCategoryVersion::setTitle);
		attributeGetterFunctions.put("description", AssetCategoryVersion::getDescription);
		attributeSetterBiConsumers.put("description", (BiConsumer<AssetCategoryVersion, String>)AssetCategoryVersion::setDescription);
		attributeGetterFunctions.put("vocabularyId", AssetCategoryVersion::getVocabularyId);
		attributeSetterBiConsumers.put("vocabularyId", (BiConsumer<AssetCategoryVersion, Long>)AssetCategoryVersion::setVocabularyId);
		attributeGetterFunctions.put("lastPublishDate", AssetCategoryVersion::getLastPublishDate);
		attributeSetterBiConsumers.put("lastPublishDate", (BiConsumer<AssetCategoryVersion, Date>)AssetCategoryVersion::setLastPublishDate);


		_attributeGetterFunctions = Collections.unmodifiableMap(attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap((Map)attributeSetterBiConsumers);
	}

	@Override
	public long getVersionedModelId() {
		return getCategoryId();
	}

	@Override
	public void populateVersionedModel(AssetCategory assetCategory) {
		assetCategory.setUuid(getUuid());
		assetCategory.setExternalReferenceCode(getExternalReferenceCode());
		assetCategory.setGroupId(getGroupId());
		assetCategory.setCompanyId(getCompanyId());
		assetCategory.setUserId(getUserId());
		assetCategory.setUserName(getUserName());
		assetCategory.setCreateDate(getCreateDate());
		assetCategory.setModifiedDate(getModifiedDate());
		assetCategory.setParentCategoryId(getParentCategoryId());
		assetCategory.setLeftCategoryId(getLeftCategoryId());
		assetCategory.setRightCategoryId(getRightCategoryId());
		assetCategory.setName(getName());
		assetCategory.setTitle(getTitle());
		assetCategory.setDescription(getDescription());
		assetCategory.setVocabularyId(getVocabularyId());
		assetCategory.setLastPublishDate(getLastPublishDate());
	}

	@Override
	public void setVersionedModelId(long categoryId) {
		setCategoryId(categoryId);
	}

	@Override
	public AssetCategory toVersionedModel() {
		if (_assetCategory == null) {
			_assetCategory = (AssetCategory)ProxyUtil.newProxyInstance(_classLoader,
					_versionedModelInterfaces,
					new VersionedModelInvocationHandler(this,
						_versionedModelMethodsMap));
		}

		return _assetCategory;
	}

	@Override
	public long getAssetCategoryVersionId() {
		return _assetCategoryVersionId;
	}

	@Override
	public void setAssetCategoryVersionId(long assetCategoryVersionId) {
		_assetCategoryVersionId = assetCategoryVersionId;
	}

	@Override
	public int getVersion() {
		return _version;
	}

	@Override
	public void setVersion(int version) {
		_columnBitmask = -1L;

		if (!_setOriginalVersion) {
			_setOriginalVersion = true;

			_originalVersion = _version;
		}

		_version = version;
	}

	public int getOriginalVersion() {
		return _originalVersion;
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		_columnBitmask |= EXTERNALREFERENCECODE_COLUMN_BITMASK;

		if (_originalExternalReferenceCode == null) {
			_originalExternalReferenceCode = _externalReferenceCode;
		}

		_externalReferenceCode = externalReferenceCode;
	}

	public String getOriginalExternalReferenceCode() {
		return GetterUtil.getString(_originalExternalReferenceCode);
	}

	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalCategoryId) {
			_setOriginalCategoryId = true;

			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public long getOriginalCategoryId() {
		return _originalCategoryId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getParentCategoryId() {
		return _parentCategoryId;
	}

	@Override
	public void setParentCategoryId(long parentCategoryId) {
		_columnBitmask |= PARENTCATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalParentCategoryId) {
			_setOriginalParentCategoryId = true;

			_originalParentCategoryId = _parentCategoryId;
		}

		_parentCategoryId = parentCategoryId;
	}

	public long getOriginalParentCategoryId() {
		return _originalParentCategoryId;
	}

	@Override
	public long getLeftCategoryId() {
		return _leftCategoryId;
	}

	@Override
	public void setLeftCategoryId(long leftCategoryId) {
		_leftCategoryId = leftCategoryId;
	}

	@Override
	public long getRightCategoryId() {
		return _rightCategoryId;
	}

	@Override
	public void setRightCategoryId(long rightCategoryId) {
		_rightCategoryId = rightCategoryId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public long getVocabularyId() {
		return _vocabularyId;
	}

	@Override
	public void setVocabularyId(long vocabularyId) {
		_columnBitmask |= VOCABULARYID_COLUMN_BITMASK;

		if (!_setOriginalVocabularyId) {
			_setOriginalVocabularyId = true;

			_originalVocabularyId = _vocabularyId;
		}

		_vocabularyId = vocabularyId;
	}

	public long getOriginalVocabularyId() {
		return _originalVocabularyId;
	}

	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		_lastPublishDate = lastPublishDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AssetCategoryVersion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(AssetCategoryVersion.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public AssetCategoryVersion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AssetCategoryVersion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssetCategoryVersionImpl assetCategoryVersionImpl = new AssetCategoryVersionImpl();

		assetCategoryVersionImpl.setAssetCategoryVersionId(getAssetCategoryVersionId());
		assetCategoryVersionImpl.setVersion(getVersion());
		assetCategoryVersionImpl.setUuid(getUuid());
		assetCategoryVersionImpl.setExternalReferenceCode(getExternalReferenceCode());
		assetCategoryVersionImpl.setCategoryId(getCategoryId());
		assetCategoryVersionImpl.setGroupId(getGroupId());
		assetCategoryVersionImpl.setCompanyId(getCompanyId());
		assetCategoryVersionImpl.setUserId(getUserId());
		assetCategoryVersionImpl.setUserName(getUserName());
		assetCategoryVersionImpl.setCreateDate(getCreateDate());
		assetCategoryVersionImpl.setModifiedDate(getModifiedDate());
		assetCategoryVersionImpl.setParentCategoryId(getParentCategoryId());
		assetCategoryVersionImpl.setLeftCategoryId(getLeftCategoryId());
		assetCategoryVersionImpl.setRightCategoryId(getRightCategoryId());
		assetCategoryVersionImpl.setName(getName());
		assetCategoryVersionImpl.setTitle(getTitle());
		assetCategoryVersionImpl.setDescription(getDescription());
		assetCategoryVersionImpl.setVocabularyId(getVocabularyId());
		assetCategoryVersionImpl.setLastPublishDate(getLastPublishDate());

		assetCategoryVersionImpl.resetOriginalValues();

		return assetCategoryVersionImpl;
	}

	@Override
	public int compareTo(AssetCategoryVersion assetCategoryVersion) {
		int value = 0;

		if (getVersion() < assetCategoryVersion.getVersion()) {
			value = -1;
		}
		else if (getVersion() > assetCategoryVersion.getVersion()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AssetCategoryVersion)) {
			return false;
		}

		AssetCategoryVersion assetCategoryVersion = (AssetCategoryVersion)obj;

		long primaryKey = assetCategoryVersion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AssetCategoryVersionModelImpl assetCategoryVersionModelImpl = this;

		assetCategoryVersionModelImpl._originalVersion = assetCategoryVersionModelImpl._version;

		assetCategoryVersionModelImpl._setOriginalVersion = false;

		assetCategoryVersionModelImpl._originalUuid = assetCategoryVersionModelImpl._uuid;

		assetCategoryVersionModelImpl._originalExternalReferenceCode = assetCategoryVersionModelImpl._externalReferenceCode;

		assetCategoryVersionModelImpl._originalCategoryId = assetCategoryVersionModelImpl._categoryId;

		assetCategoryVersionModelImpl._setOriginalCategoryId = false;

		assetCategoryVersionModelImpl._originalGroupId = assetCategoryVersionModelImpl._groupId;

		assetCategoryVersionModelImpl._setOriginalGroupId = false;

		assetCategoryVersionModelImpl._originalCompanyId = assetCategoryVersionModelImpl._companyId;

		assetCategoryVersionModelImpl._setOriginalCompanyId = false;

		assetCategoryVersionModelImpl._setModifiedDate = false;

		assetCategoryVersionModelImpl._originalParentCategoryId = assetCategoryVersionModelImpl._parentCategoryId;

		assetCategoryVersionModelImpl._setOriginalParentCategoryId = false;

		assetCategoryVersionModelImpl._originalName = assetCategoryVersionModelImpl._name;

		assetCategoryVersionModelImpl._originalVocabularyId = assetCategoryVersionModelImpl._vocabularyId;

		assetCategoryVersionModelImpl._setOriginalVocabularyId = false;

		assetCategoryVersionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AssetCategoryVersion> toCacheModel() {
		AssetCategoryVersionCacheModel assetCategoryVersionCacheModel = new AssetCategoryVersionCacheModel();

		assetCategoryVersionCacheModel.assetCategoryVersionId = getAssetCategoryVersionId();

		assetCategoryVersionCacheModel.version = getVersion();

		assetCategoryVersionCacheModel.uuid = getUuid();

		String uuid = assetCategoryVersionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			assetCategoryVersionCacheModel.uuid = null;
		}

		assetCategoryVersionCacheModel.externalReferenceCode = getExternalReferenceCode();

		String externalReferenceCode = assetCategoryVersionCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
				(externalReferenceCode.length() == 0)) {
			assetCategoryVersionCacheModel.externalReferenceCode = null;
		}

		assetCategoryVersionCacheModel.categoryId = getCategoryId();

		assetCategoryVersionCacheModel.groupId = getGroupId();

		assetCategoryVersionCacheModel.companyId = getCompanyId();

		assetCategoryVersionCacheModel.userId = getUserId();

		assetCategoryVersionCacheModel.userName = getUserName();

		String userName = assetCategoryVersionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			assetCategoryVersionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			assetCategoryVersionCacheModel.createDate = createDate.getTime();
		}
		else {
			assetCategoryVersionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			assetCategoryVersionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			assetCategoryVersionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		assetCategoryVersionCacheModel.parentCategoryId = getParentCategoryId();

		assetCategoryVersionCacheModel.leftCategoryId = getLeftCategoryId();

		assetCategoryVersionCacheModel.rightCategoryId = getRightCategoryId();

		assetCategoryVersionCacheModel.name = getName();

		String name = assetCategoryVersionCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			assetCategoryVersionCacheModel.name = null;
		}

		assetCategoryVersionCacheModel.title = getTitle();

		String title = assetCategoryVersionCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			assetCategoryVersionCacheModel.title = null;
		}

		assetCategoryVersionCacheModel.description = getDescription();

		String description = assetCategoryVersionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			assetCategoryVersionCacheModel.description = null;
		}

		assetCategoryVersionCacheModel.vocabularyId = getVocabularyId();

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			assetCategoryVersionCacheModel.lastPublishDate = lastPublishDate.getTime();
		}
		else {
			assetCategoryVersionCacheModel.lastPublishDate = Long.MIN_VALUE;
		}

		return assetCategoryVersionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AssetCategoryVersion, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler((4 * attributeGetterFunctions.size()) +
				2);

		sb.append("{");

		for (Map.Entry<String, Function<AssetCategoryVersion, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<AssetCategoryVersion, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((AssetCategoryVersion)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AssetCategoryVersion, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler((5 * attributeGetterFunctions.size()) +
				4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AssetCategoryVersion, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<AssetCategoryVersion, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AssetCategoryVersion)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AssetCategoryVersion.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AssetCategoryVersion.class, ModelWrapper.class
		};
	private static final Map<Method, Method> _versionedModelMethodsMap = new HashMap<Method, Method>();
	private static final Class<?>[] _versionedModelInterfaces = new Class<?>[] {
			AssetCategory.class
		};

	static {
		try {
			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getPrimaryKey"),
				AssetCategoryVersion.class.getMethod("getVersionedModelId"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getUuid"), AssetCategoryVersion.class.getMethod("getUuid"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getExternalReferenceCode"),
				AssetCategoryVersion.class.getMethod("getExternalReferenceCode"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getCategoryId"),
				AssetCategoryVersion.class.getMethod("getCategoryId"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getGroupId"),
				AssetCategoryVersion.class.getMethod("getGroupId"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getCompanyId"),
				AssetCategoryVersion.class.getMethod("getCompanyId"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getUserId"),
				AssetCategoryVersion.class.getMethod("getUserId"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getUserName"),
				AssetCategoryVersion.class.getMethod("getUserName"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getCreateDate"),
				AssetCategoryVersion.class.getMethod("getCreateDate"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getModifiedDate"),
				AssetCategoryVersion.class.getMethod("getModifiedDate"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getParentCategoryId"),
				AssetCategoryVersion.class.getMethod("getParentCategoryId"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getLeftCategoryId"),
				AssetCategoryVersion.class.getMethod("getLeftCategoryId"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getRightCategoryId"),
				AssetCategoryVersion.class.getMethod("getRightCategoryId"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getName"), AssetCategoryVersion.class.getMethod("getName"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getTitle"),
				AssetCategoryVersion.class.getMethod("getTitle"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getDescription"),
				AssetCategoryVersion.class.getMethod("getDescription"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getVocabularyId"),
				AssetCategoryVersion.class.getMethod("getVocabularyId"));

			_versionedModelMethodsMap.put(AssetCategory.class.getMethod(
					"getLastPublishDate"),
				AssetCategoryVersion.class.getMethod("getLastPublishDate"));
		}
		catch (ReflectiveOperationException roe) {
			throw new ExceptionInInitializerError(roe);
		}
	}

	private volatile AssetCategory _assetCategory;
	private long _assetCategoryVersionId;
	private int _version;
	private int _originalVersion;
	private boolean _setOriginalVersion;
	private String _uuid;
	private String _originalUuid;
	private String _externalReferenceCode;
	private String _originalExternalReferenceCode;
	private long _categoryId;
	private long _originalCategoryId;
	private boolean _setOriginalCategoryId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _parentCategoryId;
	private long _originalParentCategoryId;
	private boolean _setOriginalParentCategoryId;
	private long _leftCategoryId;
	private long _rightCategoryId;
	private String _name;
	private String _originalName;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private long _vocabularyId;
	private long _originalVocabularyId;
	private boolean _setOriginalVocabularyId;
	private Date _lastPublishDate;
	private long _columnBitmask;
	private AssetCategoryVersion _escapedModel;
}