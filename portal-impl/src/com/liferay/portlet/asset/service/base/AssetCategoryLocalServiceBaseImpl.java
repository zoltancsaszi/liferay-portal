/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portlet.asset.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.asset.kernel.model.AssetCategory;
import com.liferay.asset.kernel.model.AssetCategoryVersion;
import com.liferay.asset.kernel.service.AssetCategoryLocalService;
import com.liferay.asset.kernel.service.persistence.AssetCategoryFinder;
import com.liferay.asset.kernel.service.persistence.AssetCategoryPersistence;
import com.liferay.asset.kernel.service.persistence.AssetCategoryVersionPersistence;
import com.liferay.asset.kernel.service.persistence.AssetEntryFinder;
import com.liferay.asset.kernel.service.persistence.AssetEntryPersistence;
import com.liferay.asset.kernel.service.persistence.AssetVocabularyFinder;
import com.liferay.asset.kernel.service.persistence.AssetVocabularyPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserFinder;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.service.version.VersionService;
import com.liferay.portal.kernel.service.version.VersionServiceListener;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the asset category local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.portlet.asset.service.impl.AssetCategoryLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.portlet.asset.service.impl.AssetCategoryLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class AssetCategoryLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements AssetCategoryLocalService,
		IdentifiableOSGiService,
		VersionService<AssetCategory, AssetCategoryVersion> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>AssetCategoryLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.liferay.asset.kernel.service.AssetCategoryLocalServiceUtil</code>.
	 */

	/**
	 * Adds the asset category to the database. Also notifies the appropriate model listeners.
	 *
	 * @param assetCategory the asset category
	 * @return the asset category that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AssetCategory addAssetCategory(AssetCategory assetCategory) {
		assetCategory.setNew(true);

		return assetCategoryPersistence.update(assetCategory);
	}

	/**
	 * Creates a new asset category. Does not add the asset category to the database.
	 *
	 * @return the new asset category
	 */
	@Override
	@Transactional(enabled = false)
	public AssetCategory create() {
		long primaryKey = counterLocalService.increment(AssetCategory.class.getName());

		AssetCategory draftAssetCategory = assetCategoryPersistence.create(primaryKey);

		draftAssetCategory.setHeadId(primaryKey);

		return draftAssetCategory;
	}

	/**
	 * Deletes the asset category with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param categoryId the primary key of the asset category
	 * @return the asset category that was removed
	 * @throws PortalException if a asset category with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AssetCategory deleteAssetCategory(long categoryId)
		throws PortalException {
		AssetCategory assetCategory = assetCategoryPersistence.fetchByPrimaryKey(categoryId);

		if (assetCategory != null) {
			delete(assetCategory);
		}

		return assetCategory;
	}

	/**
	 * Deletes the asset category from the database. Also notifies the appropriate model listeners.
	 *
	 * @param assetCategory the asset category
	 * @return the asset category that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AssetCategory deleteAssetCategory(AssetCategory assetCategory) {
		try {
			delete(assetCategory);

			return assetCategory;
		}
		catch (PortalException pe) {
			throw new SystemException(pe);
		}
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(AssetCategory.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return assetCategoryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.portlet.asset.model.impl.AssetCategoryModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return assetCategoryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.portlet.asset.model.impl.AssetCategoryModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return assetCategoryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return assetCategoryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return assetCategoryPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public AssetCategory fetchAssetCategory(long categoryId) {
		return assetCategoryPersistence.fetchByPrimaryKey(categoryId);
	}

	/**
	 * Returns the asset category with the primary key.
	 *
	 * @param categoryId the primary key of the asset category
	 * @return the asset category
	 * @throws PortalException if a asset category with the primary key could not be found
	 */
	@Override
	public AssetCategory getAssetCategory(long categoryId)
		throws PortalException {
		return assetCategoryPersistence.findByPrimaryKey(categoryId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(assetCategoryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AssetCategory.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("categoryId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(assetCategoryLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(AssetCategory.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("categoryId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(assetCategoryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AssetCategory.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("categoryId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setGroupId(portletDataContext.getScopeGroupId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<AssetCategory>() {
				@Override
				public void performAction(AssetCategory assetCategory)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						assetCategory);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(AssetCategory.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return assetCategoryLocalService.deleteAssetCategory((AssetCategory)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return assetCategoryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the asset categories.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.portlet.asset.model.impl.AssetCategoryModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of asset categories
	 * @param end the upper bound of the range of asset categories (not inclusive)
	 * @return the range of asset categories
	 */
	@Override
	public List<AssetCategory> getAssetCategories(int start, int end) {
		return assetCategoryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of asset categories.
	 *
	 * @return the number of asset categories
	 */
	@Override
	public int getAssetCategoriesCount() {
		return assetCategoryPersistence.countAll();
	}

	/**
	 * Updates the asset category in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param assetCategory the asset category
	 * @return the asset category that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AssetCategory updateAssetCategory(AssetCategory draftAssetCategory)
		throws PortalException {
		return updateDraft(draftAssetCategory);
	}

	/**
	 */
	@Override
	public void addAssetEntryAssetCategory(long entryId, long categoryId) {
		assetEntryPersistence.addAssetCategory(entryId, categoryId);
	}

	/**
	 */
	@Override
	public void addAssetEntryAssetCategory(long entryId,
		AssetCategory assetCategory) {
		assetEntryPersistence.addAssetCategory(entryId, assetCategory);
	}

	/**
	 */
	@Override
	public void addAssetEntryAssetCategories(long entryId, long[] categoryIds) {
		assetEntryPersistence.addAssetCategories(entryId, categoryIds);
	}

	/**
	 */
	@Override
	public void addAssetEntryAssetCategories(long entryId,
		List<AssetCategory> assetCategories) {
		assetEntryPersistence.addAssetCategories(entryId, assetCategories);
	}

	/**
	 */
	@Override
	public void clearAssetEntryAssetCategories(long entryId) {
		assetEntryPersistence.clearAssetCategories(entryId);
	}

	/**
	 */
	@Override
	public void deleteAssetEntryAssetCategory(long entryId, long categoryId) {
		assetEntryPersistence.removeAssetCategory(entryId, categoryId);
	}

	/**
	 */
	@Override
	public void deleteAssetEntryAssetCategory(long entryId,
		AssetCategory assetCategory) {
		assetEntryPersistence.removeAssetCategory(entryId, assetCategory);
	}

	/**
	 */
	@Override
	public void deleteAssetEntryAssetCategories(long entryId, long[] categoryIds) {
		assetEntryPersistence.removeAssetCategories(entryId, categoryIds);
	}

	/**
	 */
	@Override
	public void deleteAssetEntryAssetCategories(long entryId,
		List<AssetCategory> assetCategories) {
		assetEntryPersistence.removeAssetCategories(entryId, assetCategories);
	}

	/**
	 * Returns the entryIds of the asset entries associated with the asset category.
	 *
	 * @param categoryId the categoryId of the asset category
	 * @return long[] the entryIds of asset entries associated with the asset category
	 */
	@Override
	public long[] getAssetEntryPrimaryKeys(long categoryId) {
		return assetCategoryPersistence.getAssetEntryPrimaryKeys(categoryId);
	}

	/**
	 */
	@Override
	public List<AssetCategory> getAssetEntryAssetCategories(long entryId) {
		return assetEntryPersistence.getAssetCategories(entryId);
	}

	/**
	 */
	@Override
	public List<AssetCategory> getAssetEntryAssetCategories(long entryId,
		int start, int end) {
		return assetEntryPersistence.getAssetCategories(entryId, start, end);
	}

	/**
	 */
	@Override
	public List<AssetCategory> getAssetEntryAssetCategories(long entryId,
		int start, int end, OrderByComparator<AssetCategory> orderByComparator) {
		return assetEntryPersistence.getAssetCategories(entryId, start, end,
			orderByComparator);
	}

	/**
	 */
	@Override
	public int getAssetEntryAssetCategoriesCount(long entryId) {
		return assetEntryPersistence.getAssetCategoriesSize(entryId);
	}

	/**
	 */
	@Override
	public boolean hasAssetEntryAssetCategory(long entryId, long categoryId) {
		return assetEntryPersistence.containsAssetCategory(entryId, categoryId);
	}

	/**
	 */
	@Override
	public boolean hasAssetEntryAssetCategories(long entryId) {
		return assetEntryPersistence.containsAssetCategories(entryId);
	}

	/**
	 */
	@Override
	public void setAssetEntryAssetCategories(long entryId, long[] categoryIds) {
		assetEntryPersistence.setAssetCategories(entryId, categoryIds);
	}

	/**
	 * Returns the asset category local service.
	 *
	 * @return the asset category local service
	 */
	public AssetCategoryLocalService getAssetCategoryLocalService() {
		return assetCategoryLocalService;
	}

	/**
	 * Sets the asset category local service.
	 *
	 * @param assetCategoryLocalService the asset category local service
	 */
	public void setAssetCategoryLocalService(
		AssetCategoryLocalService assetCategoryLocalService) {
		this.assetCategoryLocalService = assetCategoryLocalService;
	}

	/**
	 * Returns the asset category persistence.
	 *
	 * @return the asset category persistence
	 */
	public AssetCategoryPersistence getAssetCategoryPersistence() {
		return assetCategoryPersistence;
	}

	/**
	 * Sets the asset category persistence.
	 *
	 * @param assetCategoryPersistence the asset category persistence
	 */
	public void setAssetCategoryPersistence(
		AssetCategoryPersistence assetCategoryPersistence) {
		this.assetCategoryPersistence = assetCategoryPersistence;
	}

	/**
	 * Returns the asset category finder.
	 *
	 * @return the asset category finder
	 */
	public AssetCategoryFinder getAssetCategoryFinder() {
		return assetCategoryFinder;
	}

	/**
	 * Sets the asset category finder.
	 *
	 * @param assetCategoryFinder the asset category finder
	 */
	public void setAssetCategoryFinder(AssetCategoryFinder assetCategoryFinder) {
		this.assetCategoryFinder = assetCategoryFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the user finder.
	 *
	 * @return the user finder
	 */
	public UserFinder getUserFinder() {
		return userFinder;
	}

	/**
	 * Sets the user finder.
	 *
	 * @param userFinder the user finder
	 */
	public void setUserFinder(UserFinder userFinder) {
		this.userFinder = userFinder;
	}

	/**
	 * Returns the asset category version persistence.
	 *
	 * @return the asset category version persistence
	 */
	public AssetCategoryVersionPersistence getAssetCategoryVersionPersistence() {
		return assetCategoryVersionPersistence;
	}

	/**
	 * Sets the asset category version persistence.
	 *
	 * @param assetCategoryVersionPersistence the asset category version persistence
	 */
	public void setAssetCategoryVersionPersistence(
		AssetCategoryVersionPersistence assetCategoryVersionPersistence) {
		this.assetCategoryVersionPersistence = assetCategoryVersionPersistence;
	}

	/**
	 * Returns the asset entry local service.
	 *
	 * @return the asset entry local service
	 */
	public com.liferay.asset.kernel.service.AssetEntryLocalService getAssetEntryLocalService() {
		return assetEntryLocalService;
	}

	/**
	 * Sets the asset entry local service.
	 *
	 * @param assetEntryLocalService the asset entry local service
	 */
	public void setAssetEntryLocalService(
		com.liferay.asset.kernel.service.AssetEntryLocalService assetEntryLocalService) {
		this.assetEntryLocalService = assetEntryLocalService;
	}

	/**
	 * Returns the asset entry persistence.
	 *
	 * @return the asset entry persistence
	 */
	public AssetEntryPersistence getAssetEntryPersistence() {
		return assetEntryPersistence;
	}

	/**
	 * Sets the asset entry persistence.
	 *
	 * @param assetEntryPersistence the asset entry persistence
	 */
	public void setAssetEntryPersistence(
		AssetEntryPersistence assetEntryPersistence) {
		this.assetEntryPersistence = assetEntryPersistence;
	}

	/**
	 * Returns the asset entry finder.
	 *
	 * @return the asset entry finder
	 */
	public AssetEntryFinder getAssetEntryFinder() {
		return assetEntryFinder;
	}

	/**
	 * Sets the asset entry finder.
	 *
	 * @param assetEntryFinder the asset entry finder
	 */
	public void setAssetEntryFinder(AssetEntryFinder assetEntryFinder) {
		this.assetEntryFinder = assetEntryFinder;
	}

	/**
	 * Returns the asset vocabulary local service.
	 *
	 * @return the asset vocabulary local service
	 */
	public com.liferay.asset.kernel.service.AssetVocabularyLocalService getAssetVocabularyLocalService() {
		return assetVocabularyLocalService;
	}

	/**
	 * Sets the asset vocabulary local service.
	 *
	 * @param assetVocabularyLocalService the asset vocabulary local service
	 */
	public void setAssetVocabularyLocalService(
		com.liferay.asset.kernel.service.AssetVocabularyLocalService assetVocabularyLocalService) {
		this.assetVocabularyLocalService = assetVocabularyLocalService;
	}

	/**
	 * Returns the asset vocabulary persistence.
	 *
	 * @return the asset vocabulary persistence
	 */
	public AssetVocabularyPersistence getAssetVocabularyPersistence() {
		return assetVocabularyPersistence;
	}

	/**
	 * Sets the asset vocabulary persistence.
	 *
	 * @param assetVocabularyPersistence the asset vocabulary persistence
	 */
	public void setAssetVocabularyPersistence(
		AssetVocabularyPersistence assetVocabularyPersistence) {
		this.assetVocabularyPersistence = assetVocabularyPersistence;
	}

	/**
	 * Returns the asset vocabulary finder.
	 *
	 * @return the asset vocabulary finder
	 */
	public AssetVocabularyFinder getAssetVocabularyFinder() {
		return assetVocabularyFinder;
	}

	/**
	 * Sets the asset vocabulary finder.
	 *
	 * @param assetVocabularyFinder the asset vocabulary finder
	 */
	public void setAssetVocabularyFinder(
		AssetVocabularyFinder assetVocabularyFinder) {
		this.assetVocabularyFinder = assetVocabularyFinder;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.asset.kernel.model.AssetCategory",
			assetCategoryLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.asset.kernel.model.AssetCategory");
	}

	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AssetCategory checkout(AssetCategory publishedAssetCategory,
		int version) throws PortalException {
		if (!publishedAssetCategory.isHead()) {
			throw new IllegalArgumentException(
				"Unable to checkout with unpublished changes " +
				publishedAssetCategory.getHeadId());
		}

		AssetCategory draftAssetCategory = assetCategoryPersistence.fetchByHeadId(publishedAssetCategory.getPrimaryKey());

		if (draftAssetCategory != null) {
			throw new IllegalArgumentException(
				"Unable to checkout with unpublished changes " +
				publishedAssetCategory.getPrimaryKey());
		}

		AssetCategoryVersion assetCategoryVersion = getVersion(publishedAssetCategory,
				version);

		draftAssetCategory = _createDraft(publishedAssetCategory);

		assetCategoryVersion.populateVersionedModel(draftAssetCategory);

		draftAssetCategory = assetCategoryPersistence.update(draftAssetCategory);

		for (VersionServiceListener<AssetCategory, AssetCategoryVersion> versionServiceListener : _versionServiceListeners) {
			versionServiceListener.afterCheckout(draftAssetCategory, version);
		}

		return draftAssetCategory;
	}

	@Indexable(type = IndexableType.DELETE)
	@Override
	public AssetCategory delete(AssetCategory publishedAssetCategory)
		throws PortalException {
		if (!publishedAssetCategory.isHead()) {
			throw new IllegalArgumentException("AssetCategory is a draft " +
				publishedAssetCategory.getPrimaryKey());
		}

		AssetCategory draftAssetCategory = assetCategoryPersistence.fetchByHeadId(publishedAssetCategory.getPrimaryKey());

		if (draftAssetCategory != null) {
			deleteDraft(draftAssetCategory);
		}

		for (AssetCategoryVersion assetCategoryVersion : getVersions(
				publishedAssetCategory)) {
			assetCategoryVersionPersistence.remove(assetCategoryVersion);
		}

		assetCategoryPersistence.remove(publishedAssetCategory);

		for (VersionServiceListener<AssetCategory, AssetCategoryVersion> versionServiceListener : _versionServiceListeners) {
			versionServiceListener.afterDelete(publishedAssetCategory);
		}

		return publishedAssetCategory;
	}

	@Indexable(type = IndexableType.DELETE)
	@Override
	public AssetCategory deleteDraft(AssetCategory draftAssetCategory)
		throws PortalException {
		if (draftAssetCategory.isHead()) {
			throw new IllegalArgumentException("AssetCategory is not a draft " +
				draftAssetCategory.getPrimaryKey());
		}

		assetCategoryPersistence.remove(draftAssetCategory);

		for (VersionServiceListener<AssetCategory, AssetCategoryVersion> versionServiceListener : _versionServiceListeners) {
			versionServiceListener.afterDeleteDraft(draftAssetCategory);
		}

		return draftAssetCategory;
	}

	@Override
	public AssetCategoryVersion deleteVersion(
		AssetCategoryVersion assetCategoryVersion) throws PortalException {
		AssetCategoryVersion latestAssetCategoryVersion = assetCategoryVersionPersistence.findByCategoryId_First(assetCategoryVersion.getVersionedModelId(),
				null);

		if (latestAssetCategoryVersion.getVersion() == assetCategoryVersion.getVersion()) {
			throw new IllegalArgumentException(
				"Unable to delete latest version " +
				assetCategoryVersion.getVersion());
		}

		assetCategoryVersion = assetCategoryVersionPersistence.remove(assetCategoryVersion);

		for (VersionServiceListener<AssetCategory, AssetCategoryVersion> versionServiceListener : _versionServiceListeners) {
			versionServiceListener.afterDeleteVersion(assetCategoryVersion);
		}

		return assetCategoryVersion;
	}

	@Override
	public AssetCategory fetchDraft(AssetCategory assetCategory) {
		if (assetCategory.isHead()) {
			return assetCategoryPersistence.fetchByHeadId(assetCategory.getPrimaryKey());
		}

		return assetCategory;
	}

	@Override
	public AssetCategory fetchDraft(long primaryKey) {
		return assetCategoryPersistence.fetchByHeadId(primaryKey);
	}

	@Override
	public AssetCategoryVersion fetchLatestVersion(AssetCategory assetCategory) {
		long primaryKey = assetCategory.getHeadId();

		if (assetCategory.isHead()) {
			primaryKey = assetCategory.getPrimaryKey();
		}

		return assetCategoryVersionPersistence.fetchByCategoryId_First(primaryKey,
			null);
	}

	@Override
	public AssetCategory fetchPublished(AssetCategory assetCategory) {
		if (assetCategory.isHead()) {
			return assetCategory;
		}

		if (assetCategory.getHeadId() == assetCategory.getPrimaryKey()) {
			return null;
		}

		return assetCategoryPersistence.fetchByPrimaryKey(assetCategory.getHeadId());
	}

	@Override
	public AssetCategory fetchPublished(long primaryKey) {
		AssetCategory assetCategory = assetCategoryPersistence.fetchByPrimaryKey(primaryKey);

		if ((assetCategory == null) ||
				(assetCategory.getHeadId() == assetCategory.getPrimaryKey())) {
			return null;
		}

		return assetCategory;
	}

	@Override
	public AssetCategory getDraft(AssetCategory assetCategory)
		throws PortalException {
		if (!assetCategory.isHead()) {
			return assetCategory;
		}

		AssetCategory draftAssetCategory = assetCategoryPersistence.fetchByHeadId(assetCategory.getPrimaryKey());

		if (draftAssetCategory == null) {
			draftAssetCategory = assetCategoryLocalService.updateDraft(_createDraft(
						assetCategory));
		}

		return draftAssetCategory;
	}

	@Override
	public AssetCategory getDraft(long primaryKey) throws PortalException {
		AssetCategory draftAssetCategory = assetCategoryPersistence.fetchByHeadId(primaryKey);

		if (draftAssetCategory == null) {
			AssetCategory assetCategory = assetCategoryPersistence.findByPrimaryKey(primaryKey);

			draftAssetCategory = assetCategoryLocalService.updateDraft(_createDraft(
						assetCategory));
		}

		return draftAssetCategory;
	}

	@Override
	public AssetCategoryVersion getVersion(AssetCategory assetCategory,
		int version) throws PortalException {
		long primaryKey = assetCategory.getHeadId();

		if (assetCategory.isHead()) {
			primaryKey = assetCategory.getPrimaryKey();
		}

		return assetCategoryVersionPersistence.findByCategoryId_Version(primaryKey,
			version);
	}

	@Override
	public List<AssetCategoryVersion> getVersions(AssetCategory assetCategory) {
		long primaryKey = assetCategory.getPrimaryKey();

		if (!assetCategory.isHead()) {
			if (assetCategory.getHeadId() == assetCategory.getPrimaryKey()) {
				return Collections.emptyList();
			}

			primaryKey = assetCategory.getHeadId();
		}

		return assetCategoryVersionPersistence.findByCategoryId(primaryKey);
	}

	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AssetCategory publishDraft(AssetCategory draftAssetCategory)
		throws PortalException {
		if (draftAssetCategory.isHead()) {
			throw new IllegalArgumentException("Can only publish drafts " +
				draftAssetCategory.getPrimaryKey());
		}

		AssetCategory headAssetCategory = null;

		int version = 1;

		if (draftAssetCategory.getHeadId() == draftAssetCategory.getPrimaryKey()) {
			headAssetCategory = create();

			draftAssetCategory.setHeadId(headAssetCategory.getPrimaryKey());
		}
		else {
			headAssetCategory = assetCategoryPersistence.findByPrimaryKey(draftAssetCategory.getHeadId());

			AssetCategoryVersion latestAssetCategoryVersion = assetCategoryVersionPersistence.findByCategoryId_First(draftAssetCategory.getHeadId(),
					null);

			version = latestAssetCategoryVersion.getVersion() + 1;
		}

		AssetCategoryVersion assetCategoryVersion = assetCategoryVersionPersistence.create(counterLocalService.increment(
					AssetCategoryVersion.class.getName()));

		assetCategoryVersion.setVersion(version);
		assetCategoryVersion.setVersionedModelId(headAssetCategory.getPrimaryKey());

		draftAssetCategory.populateVersionModel(assetCategoryVersion);

		assetCategoryVersionPersistence.update(assetCategoryVersion);

		assetCategoryVersion.populateVersionedModel(headAssetCategory);

		headAssetCategory.setHeadId(-headAssetCategory.getPrimaryKey());

		headAssetCategory = assetCategoryPersistence.update(headAssetCategory);

		for (VersionServiceListener<AssetCategory, AssetCategoryVersion> versionServiceListener : _versionServiceListeners) {
			versionServiceListener.afterPublishDraft(draftAssetCategory, version);
		}

		deleteDraft(draftAssetCategory);

		return headAssetCategory;
	}

	@Override
	public void registerListener(
		VersionServiceListener<AssetCategory, AssetCategoryVersion> versionServiceListener) {
		_versionServiceListeners.add(versionServiceListener);
	}

	@Override
	public void unregisterListener(
		VersionServiceListener<AssetCategory, AssetCategoryVersion> versionServiceListener) {
		_versionServiceListeners.remove(versionServiceListener);
	}

	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AssetCategory updateDraft(AssetCategory draftAssetCategory)
		throws PortalException {
		if (draftAssetCategory.isHead()) {
			throw new IllegalArgumentException("Can only update draft entries " +
				draftAssetCategory.getPrimaryKey());
		}

		AssetCategory previousAssetCategory = assetCategoryPersistence.fetchByPrimaryKey(draftAssetCategory.getPrimaryKey());

		draftAssetCategory = assetCategoryPersistence.update(draftAssetCategory);

		if (previousAssetCategory == null) {
			for (VersionServiceListener<AssetCategory, AssetCategoryVersion> versionServiceListener : _versionServiceListeners) {
				versionServiceListener.afterCreateDraft(draftAssetCategory);
			}
		}
		else {
			for (VersionServiceListener<AssetCategory, AssetCategoryVersion> versionServiceListener : _versionServiceListeners) {
				versionServiceListener.afterUpdateDraft(draftAssetCategory);
			}
		}

		return draftAssetCategory;
	}

	private AssetCategory _createDraft(AssetCategory publishedAssetCategory)
		throws PortalException {
		AssetCategory draftAssetCategory = create();

		draftAssetCategory.setUuid(publishedAssetCategory.getUuid());
		draftAssetCategory.setExternalReferenceCode(publishedAssetCategory.getExternalReferenceCode());
		draftAssetCategory.setHeadId(publishedAssetCategory.getPrimaryKey());
		draftAssetCategory.setGroupId(publishedAssetCategory.getGroupId());
		draftAssetCategory.setCompanyId(publishedAssetCategory.getCompanyId());
		draftAssetCategory.setUserId(publishedAssetCategory.getUserId());
		draftAssetCategory.setUserName(publishedAssetCategory.getUserName());
		draftAssetCategory.setCreateDate(publishedAssetCategory.getCreateDate());
		draftAssetCategory.setModifiedDate(publishedAssetCategory.getModifiedDate());
		draftAssetCategory.setParentCategoryId(publishedAssetCategory.getParentCategoryId());
		draftAssetCategory.setLeftCategoryId(publishedAssetCategory.getLeftCategoryId());
		draftAssetCategory.setRightCategoryId(publishedAssetCategory.getRightCategoryId());
		draftAssetCategory.setName(publishedAssetCategory.getName());
		draftAssetCategory.setTitle(publishedAssetCategory.getTitle());
		draftAssetCategory.setDescription(publishedAssetCategory.getDescription());
		draftAssetCategory.setVocabularyId(publishedAssetCategory.getVocabularyId());
		draftAssetCategory.setLastPublishDate(publishedAssetCategory.getLastPublishDate());
		draftAssetCategory.setEntries(publishedAssetCategory.getEntries());

		draftAssetCategory.resetOriginalValues();

		return draftAssetCategory;
	}

	private final Set<VersionServiceListener<AssetCategory, AssetCategoryVersion>> _versionServiceListeners =
		Collections.newSetFromMap(new ConcurrentHashMap<VersionServiceListener<AssetCategory, AssetCategoryVersion>, Boolean>());

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return AssetCategoryLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return AssetCategory.class;
	}

	protected String getModelClassName() {
		return AssetCategory.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = assetCategoryPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = AssetCategoryLocalService.class)
	protected AssetCategoryLocalService assetCategoryLocalService;
	@BeanReference(type = AssetCategoryPersistence.class)
	protected AssetCategoryPersistence assetCategoryPersistence;
	@BeanReference(type = AssetCategoryFinder.class)
	protected AssetCategoryFinder assetCategoryFinder;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = UserFinder.class)
	protected UserFinder userFinder;
	@BeanReference(type = AssetCategoryVersionPersistence.class)
	protected AssetCategoryVersionPersistence assetCategoryVersionPersistence;
	@BeanReference(type = com.liferay.asset.kernel.service.AssetEntryLocalService.class)
	protected com.liferay.asset.kernel.service.AssetEntryLocalService assetEntryLocalService;
	@BeanReference(type = AssetEntryPersistence.class)
	protected AssetEntryPersistence assetEntryPersistence;
	@BeanReference(type = AssetEntryFinder.class)
	protected AssetEntryFinder assetEntryFinder;
	@BeanReference(type = com.liferay.asset.kernel.service.AssetVocabularyLocalService.class)
	protected com.liferay.asset.kernel.service.AssetVocabularyLocalService assetVocabularyLocalService;
	@BeanReference(type = AssetVocabularyPersistence.class)
	protected AssetVocabularyPersistence assetVocabularyPersistence;
	@BeanReference(type = AssetVocabularyFinder.class)
	protected AssetVocabularyFinder assetVocabularyFinder;
	@BeanReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}